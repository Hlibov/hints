cmd + ENTER               - вызов командной строки
git init                  - создание локального репозитория
git config --global user.name "hlib"  - имя пользователя                 //эти данные хранятся в C/USERS/.gitconfig
git config -- user.email gglebov777@gmail.com  - почта пользователя      //
git config --list         - вывод конфигурfции git
git                       - вывод всех команд git с пояснением
git help <имя команды>    - помощь о назначении команды
Esc + :wq + ENTER         - выход из тёмного окна
q                         - выход
dir                       - просмотр содержимого папки
mkdir                     - создание директории
cd "имя паки"             - переход в папку
cd ..                     - возврат в первонвчальную папку
git clone https://github.com/Hlibov?test-6.git(имя репозитория в облаке)  - клонирование репозитория локально
git status                - отображает были ли внесены изменения файлов или создание новых файлов на локальной машине в папке репозитория, но ещё не закомичены в самом репозитории.

//-----------------------------------------------ГИТ ИГНОР-----------------------------------------------//
ИГНОРИРОВАНИЕ добавления ненужных файлов в репозиторий  ---  создать файл .gitignore без расширения в локальной папке репозитория в коором указываем папки и файлы которые не следует индексировать
   для этого прописываем Пример: node_modules/ (папка node_modules со всем содержимым добавляться не будет)
                                 #это значёк коментария
                                 *.log (все файлы с расширением .log в корневой папке репозитолрия будут игнорироваться)

//---------------------------------------------ОСНОВНОЕ------------------------------------------------//
git status --untracked-files=all (или вместо all пишем normal)  --- отображает полный список изменённых данных которые требуется закомитить       
git add "название файла"  - первый этап добавления изменения файла в репозиторий
git add -A (или git add .)  --- также первый этап добав. измен. файла в репозитории но только позволяет сохранять одновременно все изменения в данном репозитории 
git rm --cached <имя файла> (git reset)   --- удаляет данный файл из под присмотра гита перед тем как нужно комитить (делать снимок файла) 
git commit -m "add file"(в кавычках пишем коментарий об изменениях)    --- второй этап добавления изменений в репозиторий (локальная фиксазия изменений файлов в репозитории).
git commit -a -m "init"    - объеденяет первый и второй этап добавления изменения данных при помощи одной команды
git remote add origin https://github.com/Hlibov/hints.git <имя репозитория> --- это вариант для того чтобы связать уже проиндексированные файлы с репозиторием на GitHub, но перед этим нужно создать этот репозиторий на GitHub
git push -u origin master --- после того как файлы связаны с репозиторием |эта команда позволяет залить файлы в этот репозиторий
git push                  - третий этап добавления изменений фалов в репозиторий но в само облако т.е. на github
git pull                  - обнавляет содержимое папки (файлы и их содержимое) репозитория на локальной машине из облака github
git clone https://github.com/Hlibov/New-JS-Lessons.git  - клонирование репозитория на локальную машину, но перед этим в то место где будет склониронны данные должен быть инициализирован гит (git init)
//-------------------------------------------ВЕТКИ-----------------------------------------------------//
git remote show origin    - информирует в каком облачном репозитории находится, в какой веткке находится
git branch                - отображает текущую ветку
git branch -v             - отображает последнии комиты в каждой из существующих веток
git log (git log --pretty=oneline)                  - вывод логов (коментов)
git log --oneline --graph --decorate --all   - более читабельный вывод логов
git diff                  - отображение изменений файлов
git branch develop        - создание новой ветки с именем develop
git checkout -b develop   - создание новой ветки develop и переход на неё
git push --set-upstream origin dev - создание ветки dev в облаке и добавление в неё локальной ветки dev
git branch -d develop     - удаление ветки develop (если в это ветке есть данные которые несмержаны с веткой master то git откажится её удалять во избежания потери данных)
git branch -D develop     - удаление ветки develop принудительно
git branch -m newbranch   - переименование текущей ветки в ветку newbranch
git checkout develop      - переход в ветку develop
git merge develop         - слияние (смерживание) двух веток при этом слияние происходит в той ветке в которой находишься и с той веткой имя которой прописана в этой команде
                            в данном случаи будем считать что мы находимся в ветке master и соответственно запись будет в этой ветке. А само слияние (смерживание) происходит
                            с веткой develop. 
gitk                      - запуск утилиты для визуяльноко понимания состояния веток

//-------------------------------------ОТМЕНА ИЗМЕНЕНИЙ-------------------------------------------------//
git checkout -- index.html   --- откатывает только файл index.html (любой файл имя которого пропишешь) до последнего коммита, если он ещё непроиндексирован
git checkout .             - откатывает все изменения во всех файлах до последнего коммита, если он ещё непроиндексирован
git reset index.html       - отменяет индексирование файла, т.е выводит файл из слежения (из под команды add .) после этой команды можно применить git checkout -- index.html для отката изменений
git reset .                - отменяет индексирование всех файлов, т.е выводит файл из слежения (из под команды add .) после этой команды можно применить git checkout .  для отката изменений
git reset --hard HEAD^1    - удаление последнего коммита и откат к предпоследнему коммиту (на локальной машине)
git reset --soft HEAD^1    - удаление из последнего коммита, но при этом файл остаётся модифицированным (под командой git add)

//-------------------------------------ПЕРЕХОД К КОММИТУ-------------------------------------------//
git checkout b81b1b1 (log коммита)  - преход к данному коммиту

//-------------------------------------ПЛАГИН ДЛЯ GIT------------------------------------------------//
git history diff  ---  применим для VS Code удобный интерфейс для инспектирования истории коммитов
Gist              ---  применим для VS Code позволяет создавать гисты на гитхабе и добавлять уже имеющиеся гисты гисты в проект (https://www.youtube.com/watch?v=80_vjSgrudY&list=PLuY6eeDuleIOMB2R_Kky05ZfiAx2_pbAH&index=9 )